%include "lib.inc"

%define Q_WORD 8 ;длина qword
%define FIND_KEY 1 ;найден ключ
%define LAST_KEY 0 ;последний элемент списка
%define ERROR_KEY 0 ;не найдено значение по ключу

section .text
global find_word


; находит адрес начала значения по его ключу
; аргументы:
; rdi: указатель на нуль-терминированную строку
; rsi: указатель на начало словаря
; возвращает адрес начала значения (0, если не найден ключ)
find_word:
	cmp rsi, LAST_KEY ;выход, если список пуст
    je .error

.loop: ;цикл по списку
	mov r10, [rsi] ;адрес на следующий элемент в списке
	add rsi, Q_WORD ;адрес, где храниться ключ

	push rdi ;сохраняем адрес строки с искомым ключом
	push rsi ;сохраняем адрес строки с текущим ключом
	push r10 ;сохраняем адрес следущего элемента
	call string_equals ;сравниваем ключ с текущим ключом словаря

	cmp rax, FIND_KEY ;выход, если нашли нужный ключ
	je .exit

	pop r10 ;восстанавливаем адрес следущего элемента
	pop rsi ;восстанавливаем адрес строки с текущим ключом
	pop rdi ;восстанавливаем адрес строки с искомым ключом

	cmp r10, LAST_KEY ;выход, если достигнут конец списка
	je .error

	mov rsi, r10 ;переходим на следующий элемент
	jmp .loop

.exit:	;успешно нашли значение
	pop r10 ;восстанавливаем адрес следущего элемента
	pop rsi ;восстанавливаем адрес строки с текущим ключом
	pop rdi ;восстанавливаем адрес строки с искомым ключом
	mov rax, rsi
	sub rax, Q_WORD
	ret

.error: ;не нашли значение
	mov rax, ERROR_KEY
	ret